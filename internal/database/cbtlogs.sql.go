// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cbtlogs.sql

package database

import (
	"context"
	"database/sql"
)

const createCbtlog = `-- name: CreateCbtlog :one
INSERT INTO
    cbtlogs (filename, relative_path, url)
VALUES (?, ?, ?) RETURNING id, filename, relative_path, url, upload_status, upload_status_reason, active, created_at, updated_at
`

type CreateCbtlogParams struct {
	Filename     string
	RelativePath sql.NullString
	Url          sql.NullString
}

func (q *Queries) CreateCbtlog(ctx context.Context, arg CreateCbtlogParams) (Cbtlog, error) {
	row := q.db.QueryRowContext(ctx, createCbtlog, arg.Filename, arg.RelativePath, arg.Url)
	var i Cbtlog
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.RelativePath,
		&i.Url,
		&i.UploadStatus,
		&i.UploadStatusReason,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCbtlogByFileName = `-- name: GetCbtlogByFileName :one
SELECT id, filename, relative_path, url, upload_status, upload_status_reason, active, created_at, updated_at FROM cbtlogs WHERE filename = ?
`

func (q *Queries) GetCbtlogByFileName(ctx context.Context, filename string) (Cbtlog, error) {
	row := q.db.QueryRowContext(ctx, getCbtlogByFileName, filename)
	var i Cbtlog
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.RelativePath,
		&i.Url,
		&i.UploadStatus,
		&i.UploadStatusReason,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCbtlogsByUploadStatus = `-- name: ListCbtlogsByUploadStatus :many
SELECT id, filename, relative_path, url, upload_status, upload_status_reason, active, created_at, updated_at
FROM cbtlogs
WHERE
    upload_status = ?
ORDER BY created_at DESC
`

func (q *Queries) ListCbtlogsByUploadStatus(ctx context.Context, uploadStatus string) ([]Cbtlog, error) {
	rows, err := q.db.QueryContext(ctx, listCbtlogsByUploadStatus, uploadStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cbtlog
	for rows.Next() {
		var i Cbtlog
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.RelativePath,
			&i.Url,
			&i.UploadStatus,
			&i.UploadStatusReason,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCbtlogUrl = `-- name: UpdateCbtlogUrl :exec
UPDATE cbtlogs
SET
    url = ?,
    upload_status = ?,
    upload_status_reason = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?
`

type UpdateCbtlogUrlParams struct {
	Url                sql.NullString
	UploadStatus       string
	UploadStatusReason string
	ID                 int64
}

func (q *Queries) UpdateCbtlogUrl(ctx context.Context, arg UpdateCbtlogUrlParams) error {
	_, err := q.db.ExecContext(ctx, updateCbtlogUrl,
		arg.Url,
		arg.UploadStatus,
		arg.UploadStatusReason,
		arg.ID,
	)
	return err
}

const updateCtblogUploadStatus = `-- name: UpdateCtblogUploadStatus :exec
UPDATE cbtlogs
SET
    upload_status = ?,
    upload_status_reason = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = ?
`

type UpdateCtblogUploadStatusParams struct {
	UploadStatus       string
	UploadStatusReason string
	ID                 int64
}

func (q *Queries) UpdateCtblogUploadStatus(ctx context.Context, arg UpdateCtblogUploadStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCtblogUploadStatus, arg.UploadStatus, arg.UploadStatusReason, arg.ID)
	return err
}
